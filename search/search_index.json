{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Under Construction</p> <p>This playbook is under construction and caution should be used.</p> <p></p>"},{"location":"apps/kasm/","title":"Kasm","text":""},{"location":"apps/kasm/#the-container-streaming-platform","title":"The Container Streaming Platform\u00ae","text":"<p>Streaming containerized apps and desktops to end-users. The Workspaces platform provides enterprise-class orchestration, data loss prevention, and web streaming technology to enable the delivery of containerized workloads to your browser.</p>"},{"location":"apps/kasm/#installation-requirements","title":"Installation Requirements","text":"Source <p>Kasm Docs</p>"},{"location":"apps/kasm/#supported-operating-systems","title":"Supported Operating Systems","text":"<ul> <li>Ubuntu 18.04 / 20.04 / 22.04 (amd64/arm64)</li> <li>Debian 10 / 11 / 12 (amd64/arm64)</li> <li>CentOS 7 / 8 / 9 (amd64/arm64)</li> <li>Oracle Linux 7 / 8 / 9 (amd64/arm64)</li> <li>Raspberry Pi OS (Debian) 10 / 11 / 12 (arm64)</li> <li>Other</li> </ul>"},{"location":"apps/kasm/#resource-requirements","title":"Resource Requirements","text":"<ul> <li>CPU: 2 Cores</li> <li>Memory: 4GB</li> <li>Storage: 50GB</li> </ul> <p>Warning</p> <p>This is the minimum requirement to run the Kasm services and Agent. You will need more space to download additional workspaces. It is recommened to have more resources available for sessions</p>"},{"location":"apps/kasm/#installation","title":"Installation","text":"Installation Guide <p>Kasm Docs</p> <ol> <li>On Proxmox, create a new container utilizing the latest Debian release</li> <li>Update everything with <code>apt</code> and install <code>curl</code> <pre><code>apt update &amp;&amp; apt upgrade -y; apt autoclean -y; apt autoremove -y; apt install -y curl\n</code></pre></li> <li> <p>Copy and paste the following into the terminal. While you wait for it to build and boot, update your firewall rules.     <pre><code>cd /tmp\ncurl -O https://kasm-static-content.s3.amazonaws.com/kasm_release_1.14.0.3a7abb.tar.gz\ntar -xf kasm_release_1.14.0.3a7abb.tar.gz\nkasm_release/install.sh --accept-eula \n</code></pre></p> <p>Tip</p> <p>Check the documentation to get the latest release. They do not use a \"latest\" tag to download the tar.</p> <p>Danger</p> <p>The install will only show the passwords once. Ensure you get a screen capture of the passwords so you can log in.</p> </li> <li> <p>The whole application will be available after you see the passwords. Open the URL <code>https://0.0.0.0/</code> in a web-browser. You should see the Kasm Workspaces login screen. Login as <code>admin@kasm.local</code>.</p> </li> <li>Enable 2FA<ol> <li>Navigate to <code>Access Management</code> -&gt; <code>Groups</code></li> <li>Click Edit on the <code>All Users</code> group</li> <li>Click the <code>Settings</code> tab</li> <li>Click the <code>Add Settings</code> Button</li> <li>Add <code>enable_totp_two_factor</code></li> <li>Log out and then back in to enable the code generation</li> </ol> </li> </ol>"},{"location":"apps/netbox/","title":"Netbox","text":""},{"location":"apps/netbox/#the-premiere-network-source-of-truth","title":"The Premiere Network Source of Truth","text":"<p>NetBox is the source of truth for everything on your network, from physical components like power systems and cabling to virtual assets like IP addresses and VLANs. Network automation and monitoring tools draw from this authoritative plan to push out configurations and monitor changes across the enterprise.</p>"},{"location":"apps/netbox/#installation","title":"Installation","text":"<ol> <li>On Proxmox, create a new container utilizing the latest Debian release</li> <li>Update everything with <code>apt</code> and install <code>git</code>, <code>docker</code>, <code>docker-compose</code>, and <code>containerd</code> <pre><code>apt update &amp;&amp; apt upgrade -y; apt autoclean -y; apt autoremove -y; apt install -y git docker docker-compose containerd\n</code></pre></li> <li> <p>Copy and paste the following into the terminal. While you wait for it to build and boot, update your firewall rules.     <pre><code>git clone -b release https://github.com/netbox-community/netbox-docker.git\ncd netbox-docker\ntee docker-compose.override.yml &lt;&lt;EOF\nversion: '3.4'\nservices:\nnetbox:\n  ports:\n    - 8000:8080\nEOF\ndocker-compose pull\ndocker-compose up\n</code></pre></p> </li> <li> <p>Create your user to log in:    <pre><code>docker-compose exec netbox /opt/netbox/netbox/manage.py createsuperuser\n</code></pre></p> </li> <li>The whole application will be available after a few minutes. Open the URL <code>http://0.0.0.0:8000/</code> in a web-browser. You should see the NetBox homepage.</li> </ol>"},{"location":"apps/wazuh/","title":"Wazuh","text":""},{"location":"apps/wazuh/#getting-started-with-wazuh","title":"Getting started with Wazuh","text":"<p>Wazuh is a free and open source security platform that unifies XDR and SIEM capabilities. It protects workloads across on-premises, virtualized, containerized, and cloud-based environments.</p> <p>Wazuh helps organizations and individuals to protect their data assets against security threats. It is widely used by thousands of organizations worldwide, from small businesses to large enterprises.</p>"},{"location":"apps/wazuh/#installation","title":"Installation","text":""},{"location":"apps/wazuh/#container-setup","title":"Container Setup","text":"<ol> <li>Create a new Ubuntu LXC<ul> <li>Name: wazuh</li> <li>CPU: 4 cores</li> <li>Storage: 55 GB</li> <li>Memory: 8200 MB</li> <li>Swap: 4100 MB</li> <li>Network: <code>static</code></li> </ul> </li> <li>Update the container <pre><code>apt update &amp;&amp; apt upgrade -y; apt autoclean -y; apt autoremove-y\n</code></pre></li> <li>Install Dependencies     <pre><code>apt install -y curl gnupg apt-transport-https\n</code></pre></li> <li>Install the GPG key     <pre><code>curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import &amp;&amp; chmod 644 /usr/share/keyrings/wazuh.gpg\n</code></pre></li> <li>Download and run the Wazuh installation script     <pre><code>curl -sO https://packages.wazuh.com/4.6/wazuh-install.sh &amp;&amp; bash ./wazuh-install.sh -a\n</code></pre></li> </ol> Password Missed? <p>If the interface lost connection and you didn't see the password, you can run:  </p> <pre><code>tar -O -xvf wazuh-install-files.tar wazuh-install-files/wazuh-passwords.txt\n</code></pre>"},{"location":"apps/wazuh/#firewall-configuration","title":"Firewall Configuration","text":"<p>From Wazuh Docs we must port forward or open the following ports:</p> <ul> <li>1514 (TCP) for agent connection</li> <li>1515 (TCP) for agent enrollment service</li> </ul>"},{"location":"apps/wireguard/","title":"WireGuard","text":"<p>WireGuard\u00ae is an extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography. It aims to be faster, simpler, leaner, and more useful than IPsec, while avoiding the massive headache. It intends to be considerably more performant than OpenVPN. WireGuard is designed as a general purpose VPN. However, WireGuard will not run on Windows when the user is a non-administrator account.</p> <p>Unlike other VPN tools and technologies, the Wireguard client creates a tunnel interface (showing up as a network adapter) for each connection you have configured when you try to connect, aka \"on the fly\". When you terminate the connection the client deletes the tunnel interface entirely. It does this outside the official VPN plumbing of Windows. That design has the severe limitation that you need to be an administrator of the machine so the software can create the interface.</p> <p>There are two possible workarounds to enable the WireGuard interface.</p> <ol> <li>Switch to the administrator account to activate WireGuard than switch back to the standard user account.<ul> <li>Pro: admin user has access to all WireGuard GUI</li> <li>Con: it takes time to switch between accounts</li> </ul> </li> <li> <p>Add a registry key and add user to the <code>Network Configuration Operators</code> group.</p> <ul> <li>Pro: WireGuard GUI is accessible</li> <li>Con: messing with registry, GUI functionality severely limited, messes with privilege elevation prompt</li> </ul> <p>Info</p> </li> </ol>"},{"location":"apps/wireguard/#network-configuration-operators","title":"Network Configuration Operators","text":"<p>Members of the Network Configuration Operators group can have the following administrative privileges to manage configuration of networking features:</p> <pre><code>- Modify the Transmission Control Protocol/Internet Protocol (TCP/IP) properties for a local area network (LAN) connection, which includes the IP address, the subnet mask, the default gateway, and the name servers.\n- Rename the LAN connections or remote access connections that are available to all the users.\n- Enable or disable a LAN connection.\n- Modify the properties of all remote access connections of users.\n- Delete all the remote access connections of users.\n- Rename all the remote access connections of users.\n- Issue `ipconfig`, `ipconfig /release`, and `ipconfig /renew` commands.\n- Enter the PIN unblock key (PUK) for mobile broadband devices that support a SIM card.\n</code></pre> <p>This group appears as an SID until the domain controller is made the primary domain controller and it holds the operations master (FSMO) role. This group can't be renamed, deleted, or removed.</p> <p>The Network Configuration Operators group applies to the Windows Server operating system in Default Active Directory security groups.</p>"},{"location":"apps/wireguard/#how-to-add-a-user-to-a-group-on-windows","title":"How to add a User to a Group on Windows","text":"<p>Warning</p> <p>The images below are captured from Windows 11. However, the same steps apply to Windows 10, but they may look slightly different.</p> <ol> <li>From the administrator account, open your computer's Start menu. The Start menu button looks like a Windows icon on your desktop taskbar.     </li> <li>Type <code>Computer Management</code> and click Open </li> <li>Click on <code>System Tools</code> drop down to expose <code>Local Users and Groups</code>. Then click on the drop down to expose the <code>Groups</code> folder. Click on the <code>Groups</code> folder that will display on the groups in the right-hand pane. You can now double-click on <code>Network Configuration Operators</code>.    </li> <li>Click the Add... button     </li> <li>Add each user by typing the name into the block and then pressing Check Names. Repeat this for each user on the computer. Then press OK.     </li> </ol>"},{"location":"apps/wireguard/#how-to-add-a-registry-key","title":"How to add a registry key","text":"<p>Warning</p> <p>The images below are captured from Windows 11. However, the same steps apply to Windows 10, but they may look slightly different.</p> <ol> <li>From the administrator account, open your computer's Start menu. The Start menu button looks like a Windows icon on your desktop taskbar.     </li> <li>Type <code>Registry Editior</code> and click Open </li> <li>Navigate to <code>Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\</code>. If you have a WireGuard folder, skip the next step.     </li> <li>If you do not have a WireGuard folder, right-click on <code>SOFTWARE</code> and select New -&gt; Key and type \"WireGuard\"     </li> <li>On the WireGuard folder, right-click and choose New -&gt; <code>DWORD (32-bit) Value</code> and name it <code>LimitedOperatorUI</code> </li> <li>Double-click on the new DWORD and enter <code>1</code> for the value.     </li> <li>Press OK and close all the windows. Restart the computer. Users should now be able to start the WireGuard client to connect.</li> </ol> <p>Warning</p> <p>When this key is set to DWORD(1), the UI will be launched on desktops of users belonging to the Network Configuration Operators builtin group (S-1-5-32-556), with the following limitations for members of that group:</p> <pre><code>- Configurations are stripped of all public, private, and pre-shared keys;\n- No version update popup notifications are shown, and updates are not permitted, though a tab still indicates the availability;\n- Adding, removing, editing, importing, or exporting configurations is forbidden; and\n- Quitting the manager is forbidden.\n</code></pre> <p>However, basic functionality such as starting and stopping tunnels remains intact.</p> Cite <ul> <li> StackExchange superuser forum</li> <li> Jason A. Donenfeld (zx2c4)</li> <li> Microsoft Understand Security Groups</li> </ul>"},{"location":"network/cloudflare/","title":"Cloudflare DNS","text":""},{"location":"network/cloudflare/#dns-only","title":"DNS Only","text":""},{"location":"network/cloudflare/#proxied","title":"Proxied","text":""},{"location":"network/cloudflare/#process","title":"Process","text":"<ol> <li>Sign-up / Log into Cloudflare</li> <li>On Cloudflare, locate the Websites tab on left, click <code>Add a site</code></li> <li>Enter your domain name</li> <li>Get the nameservers in the DNS settings</li> <li>Log into GoDaddy and update the nameservers with the Cloudflare NS records</li> <li>In Cloudflare, change all your records' Proxy status to DNS only</li> <li>Wait for all DNS caches to flush and NS update</li> <li>In Cloudflare, click your website, then choose SSL/TLS of the left</li> <li>On Overview, choose <code>Full</code></li> <li>Go back to the DNS page and turn the CNAME records' Proxy status back to <code>Proxied</code>. DO NOT Proxy the IP address otherwise you'll break VPN</li> <li>Click SSL/TLS again and click Edge Certificates</li> <li>Enable Always Use HTPS and HSTS.</li> <li>Change Minimum TLS version to 1.2</li> <li>Go to Origin Server and Create Certificate</li> <li>Copy and paste the cert and key into a notepad for safe keeping</li> <li>Go into pfSense's Cert Manager and import the cert</li> <li>Go to HAProxy and change the frontend's cert to the new Origin Server Cert</li> <li>Go back to Cloudflare SSL/TLS Overview and select <code>Full (strict)</code></li> <li>Go into the Origin Server settings and enable <code>Authenticated Origin Pulls</code></li> </ol>"},{"location":"network/cloudflare/#sources","title":"Sources","text":"<ul> <li>Getting pfsense/HAProxy to work behind Cloudflare</li> <li>Setup &amp; Configure HAProxy Container with Cloudflare Origins</li> <li>Looking for HAProxy behind Cloudflare tutorial / example</li> <li>How to add Cloudflare in front of HAProxy</li> </ul>"},{"location":"os/achunter/","title":"Installing AC-Hunter on Proxmox","text":""},{"location":"os/achunter/#rtfm-first","title":"RTFM First","text":"<ul> <li> Preinstall Guide </li> <li> Install Guide </li> </ul>"},{"location":"os/achunter/#the-procedure","title":"The Procedure","text":"<p>Note</p> <p>This process will install Zeek, BeaKer, and AC-Hunter. I am running this on my home network to experiment with Zeek and AC-Hunter. See the link down below about the warning about capturing packets in a VM.</p> DO NOT USE LXC CONTAINERS <p>If you use the <code>ubuntu-20.04-standard_20.04-1_amd64.tar.gz</code> LXC CT Template, AC-Hunter will fail to start. </p> <ol> <li>Install Proxmox (this guide does not cover how to do that)</li> <li>Navigate to Proxmox's local -&gt; ISO Images and download Ubuntu 20.04 to storage. You can find it  here.</li> <li>Install OpenV Switch in Proxmox    <pre><code>root@pve:~#  apt install -y openvswitch-switch\n</code></pre></li> <li>Create an OVS vmbr and port    a. In the Proxmox Network, create a new OVS Bridge and give it a vmbr name and ensure <code>Autostart</code> is selected    b. In the Bridge ports section, select the physical interface ie. <code>eno4</code></li> <li>In a Proxmox shell (replace the # with your vmbr name)    <pre><code>root@pve:~# ovs-vsctl clear bridge vmbr# mirrors\n</code></pre></li> <li>Create a new VM using the Ubuntu ISO with    <pre><code>VM ID: &lt;as applicable&gt;\nName: &lt;zeek or whatever seems appropriate&gt;\nDisk: 500GB\nCPU: 4 Cores\nRAM: 32GB (32768MB)\nNetwork: &lt;appropriate Bridge&gt; (this will be management)\n</code></pre></li> <li>Open the new VM settings, create a new Network Device, and attach the vmbr to the second network interface then UNCHECK firewall</li> <li>Create a second VM using the Ubuntu ISO with    <pre><code>VM ID: &lt;as applicable&gt;\nName: &lt;ACHunter or whatever seems appropriate&gt;\nDisk: 500GB\nCPU: 8 (2 sockets, 4 Cores)\nRAM: 64GB (65536MB)\nNetwork: &lt;appropriate Bridge&gt; (this will be management)\n</code></pre></li> <li>Start the AC-Hunter and Zeek VMs</li> <li>Update both systems</li> <li>This guide does not cover how to set up SSH, but you need to configure SSH for the two VMs to talk to each other. You will need to use <code>ssh-keygen</code> to make new SSH keys and <code>ssh-copy-id</code> to copy the keys to each of the servers. Ensure you can SSH into each other. NOTE I also suggest modifying your <code>/etc/hosts</code> file to include the IP address and hostname of the servers. Similar to the one below:     <pre><code>192.168.1.100 zeek zeek.home.network\n192.168.1.101 achunter achunter.home.network\n</code></pre></li> <li>In the Proxmox shell:    In the commands below, the <code>ip link | grep tap</code> command will show all the interfaces, you're looking for a <code>tap</code> with the VM's ID in the interface. For example, if you have the Zeek container as VM 200, you'd look for <code>tap200i1</code>. The <code>tap200i0</code> is the first interface for the management interface. You will replace that in the second command. You will also replace the # with the vmbr you created earlier.  <pre><code>root@pve:~# ip link | grep tap\nroot@pve:~# ovs-vsctl --id=@p get port tap&lt;VMID&gt;i1 -- --id=@m create mirror name=span1 select-all=true output-port=@p -- set bridge vmbr# mirrors=@m\n</code></pre></li> <li> Download the AC-Hunter tar file into the AC-Hunter VM</li> <li>Run the install script based on the Install Guide (see, told you to RTFM.)     <pre><code>tar xvf *.tar\ncd achunter\n./install_acm.sh zeek user@zeek achunter user@achunter beaker user@achunter\n</code></pre></li> </ol>"},{"location":"os/achunter/#troubleshooting","title":"Troubleshooting","text":"<p>While installing, if you receive an error stating something along the lines of <code>TypeError: kwargs_from_env() got an unexpected keyword argument 'ssl_version'</code> you can reference a dude's workaround in  Discord.</p> <p>I ran into an error when installing AC Hunter CE on a fresh Ubuntu 22.0.4.3 LTS system with Python 3.10.12, Docker version 24.07, and docker-compose version 1.29.2. The error occured at line 362 of install_ac_hunter.sh: <code>local mongo_datasets=`./hunt run --rm db_client mongo_cmd.sh \"db.getMongo().getDBNames()\"</code>. The error was thrown by docker-compose, which was being called from the hunt bash script, so this issue could also be seen outside of the installation process. </p> <p>The last part of the error is:   <code>File \"/usr/local/lib/python3.10/dist-packages/compose/cli/docker_client.py\", line 124, in docker_client     kwargs = kwargs_from_env(environment=environment, ssl_version=tls_version) TypeError: kwargs_from_env() got an unexpected keyword argument 'ssl_version'</code></p>"},{"location":"os/achunter/#workaround-1","title":"Workaround #1","text":"<p>Use older version of Docker / docker-compose.</p>"},{"location":"os/achunter/#workaround-2","title":"Workaround #2","text":"<p>Need to edit 3 lines in <code>/usr/local/lib/python3.10/dist-packages/compose/cli/docker_client.py</code> (make a backup first).  Delete line 112 with <code>ssl_version=tls_version</code>. Also, remove the ending comma from line 111. Line 123 (line 124 in the unedited file), remove <code>, ssl_version=tls_version</code>. </p> <p>The updated file should look like:</p> <p>Lines 109 - 111: <pre><code>        return TLSConfig(\n            client_cert=client_cert, verify=verify, ca_cert=ca_cert,\n            assert_hostname=False if skip_hostname_check else None\n        )\n</code></pre></p> <p>Line 123: <pre><code>        kwargs = kwargs_from_env(environment=environment)\n</code></pre></p> <p>After this change, the installation of AC Hunter and Zeek will complete without errors. AC-Hunter CE is up and running.</p>"},{"location":"os/achunter/#user-guides","title":"User Guides","text":"<ul> <li> AC-Hunter CTF User Guide </li> <li> AC-Hunter User Guide </li> </ul>"},{"location":"os/achunter/#resourcessources","title":"Resources/Sources","text":"<ul> <li> HoldMyBeer Security: Install/Setup Zeek + PF_Ring on Ubuntu 18.04 on Proxmox 5.3 + OpenVSwitch </li> <li> Active Countermeasures: Is It OK to Capture Packets in a Virtual Machine? </li> <li> Installing Security Onion on Proxmox video </li> <li> Security Onion and Proxmox FYI on promisc setup </li> </ul> <p>!!! </p>"},{"location":"os/seconion/","title":"Installing Security Onion on Proxmox","text":"<p>Note</p> <p>I am running this on my home network to experiment with Security Onion. See the link down below about the warning about running capturing packets in a VM.</p> <ol> <li>Install Proxmox (this guide does not cover how to do that)</li> <li> Download the Security Onion ISO to Proxmox</li> <li>Install OpenV Switch in Proxmox    <pre><code>root@pve:~#  apt install -y openvswitch-switch\n</code></pre></li> <li>Create an OVS vmbr and port    a. In the Proxmox Network, create a new OVS Bridge and give it a vmbr name and ensure <code>Autostart</code> is selected    b. In the Bridge ports section, select the physical interface ie. <code>eno4</code></li> <li>In a Proxmox shell (replace the # with your vmbr name)    <pre><code>root@pve:~# ovs-vsctl clear bridge vmbr# mirrors\n</code></pre></li> <li>Create a new VM with    <pre><code>VM ID: &lt;as applicable&gt;\nName: &lt;SecOnion or whatever seems appropriate&gt;\nDisk: 500GB\nCPU: 2 Sockets / 2 Cores\nRAM: 16GB (16384MB)\nNetwork: &lt;appropriate Bridge&gt; (this will be management)\n</code></pre></li> <li>Open the new VM settings and attach the vmbr as a second network interface and UNCHECK firewall</li> <li>Start the VM and install Security Onion as a standalone</li> <li>In the Proxmox shell    In the commands below, the <code>ip link</code> command will show all the interfaces, you're looking for a <code>tap</code> followed by the VM's ID. For example, if you have Security Onion as VM 101, you'd look for <code>tap101i1</code>. You will replace that in the second command. You will also replace the # with the vmbr you created earlier    <pre><code>root@pve:~# ip link\nroot@pve:~# ovs-vsctl --id=@p get port tap&lt;VMID&gt;i1 -- --id=@m create mirror name=span1 select-all=true output-port=@p -- set bridge vmbr# mirrors=@m\n</code></pre></li> </ol>"},{"location":"os/seconion/#resourcessources","title":"Resources/Sources","text":"<ul> <li> Installing Security Onion on Proxmox video </li> <li> Security Onion and Proxmox FYI on promisc setup </li> <li> HoldMyBeer Security: Install/Setup Zeek + PF_Ring on Ubuntu 18.04 on Proxmox 5.3 + OpenVSwitch </li> <li> Active Countermeasures: Is It OK to Capture Packets in a Virtual Machine? </li> </ul>"},{"location":"resources/app1/","title":"Appendix 1","text":""},{"location":"resources/websites/","title":"Website Links","text":""},{"location":"resources/websites/#netbox-resources","title":"Netbox Resources","text":"<ul> <li> netbox-docker repo      The GitHub repository houses the components needed to build NetBox as a container. Images are built regularly using the code in that repository and are pushed to Docker Hub, Quay.io and GitHub Container Registry.  </li> <li> netbox-topology-views repo      Create topology views/maps from your devices in NetBox. The connections are based on the cables you created in NetBox.  </li> <li> netbox-ui-plugin repo      A topology visualization plugin for NetBox powered by NextUI Toolkit.  </li> <li> ntmap repo      Ntmap is a tool to visualize network topologies using Netbox as a data source.  </li> </ul>"},{"location":"resources/websites/#windows-active-directory-resources","title":"Windows &amp; Active Directory Resources","text":"<ul> <li> Creating an Active Directory Home Lab      This tutorial covers segmenting your lab from the rest of your home network, Installing Windows Server 2019, Installing Active Directory, and then joining a Windows 10 workstation to a domain.  </li> </ul>"},{"location":"resources/websites/#kasm-resources","title":"Kasm Resources","text":"<ul> <li>Kasm Windows Guides  <ul> <li> Kasm Workspaces Windows Guide </li> <li> Kasm Docs - Windows Guide </li> </ul> </li> <li> Kasm Docs - Build Custom Images </li> </ul>"},{"location":"resources/websites/#snipe-it-resources","title":"Snipe-IT Resources","text":"<ul> <li> Docker Hub - Snipe-IT </li> </ul>"},{"location":"resources/websites/#zeekritaac-hunter-resources","title":"Zeek/RITA/AC-Hunter Resources","text":"<ul> <li> How to use a Raspberry PI as a Network Sensor with Zeek and Rita </li> <li> Zeek IDS Installation on Raspberry PI Part 1 </li> <li> Zeek IDS Installation on Raspberry PI Part 2 </li> <li> Zeek IDS Installation on Raspberry PI Part 3 </li> </ul>"}]}